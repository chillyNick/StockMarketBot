// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/stock_market_api.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockMarketServiceClient is the client API for StockMarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockMarketServiceClient interface {
	CreateUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserId, error)
	GetStocks(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*GetStocksResponse, error)
	AddStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPortfolioChanges(ctx context.Context, in *GetPortfolioChangesRequest, opts ...grpc.CallOption) (*GetPortfolioChangesResponse, error)
}

type stockMarketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockMarketServiceClient(cc grpc.ClientConnInterface) StockMarketServiceClient {
	return &stockMarketServiceClient{cc}
}

func (c *stockMarketServiceClient) CreateUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/api.StockMarketService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockMarketServiceClient) GetStocks(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*GetStocksResponse, error) {
	out := new(GetStocksResponse)
	err := c.cc.Invoke(ctx, "/api.StockMarketService/GetStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockMarketServiceClient) AddStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.StockMarketService/AddStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockMarketServiceClient) RemoveStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.StockMarketService/RemoveStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockMarketServiceClient) GetPortfolioChanges(ctx context.Context, in *GetPortfolioChangesRequest, opts ...grpc.CallOption) (*GetPortfolioChangesResponse, error) {
	out := new(GetPortfolioChangesResponse)
	err := c.cc.Invoke(ctx, "/api.StockMarketService/GetPortfolioChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockMarketServiceServer is the server API for StockMarketService service.
// All implementations must embed UnimplementedStockMarketServiceServer
// for forward compatibility
type StockMarketServiceServer interface {
	CreateUser(context.Context, *empty.Empty) (*UserId, error)
	GetStocks(context.Context, *UserId) (*GetStocksResponse, error)
	AddStock(context.Context, *StockRequest) (*empty.Empty, error)
	RemoveStock(context.Context, *StockRequest) (*empty.Empty, error)
	GetPortfolioChanges(context.Context, *GetPortfolioChangesRequest) (*GetPortfolioChangesResponse, error)
	mustEmbedUnimplementedStockMarketServiceServer()
}

// UnimplementedStockMarketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockMarketServiceServer struct {
}

func (UnimplementedStockMarketServiceServer) CreateUser(context.Context, *empty.Empty) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedStockMarketServiceServer) GetStocks(context.Context, *UserId) (*GetStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStocks not implemented")
}
func (UnimplementedStockMarketServiceServer) AddStock(context.Context, *StockRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStock not implemented")
}
func (UnimplementedStockMarketServiceServer) RemoveStock(context.Context, *StockRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStock not implemented")
}
func (UnimplementedStockMarketServiceServer) GetPortfolioChanges(context.Context, *GetPortfolioChangesRequest) (*GetPortfolioChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioChanges not implemented")
}
func (UnimplementedStockMarketServiceServer) mustEmbedUnimplementedStockMarketServiceServer() {}

// UnsafeStockMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockMarketServiceServer will
// result in compilation errors.
type UnsafeStockMarketServiceServer interface {
	mustEmbedUnimplementedStockMarketServiceServer()
}

func RegisterStockMarketServiceServer(s grpc.ServiceRegistrar, srv StockMarketServiceServer) {
	s.RegisterService(&StockMarketService_ServiceDesc, srv)
}

func _StockMarketService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockMarketServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StockMarketService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockMarketServiceServer).CreateUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockMarketService_GetStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockMarketServiceServer).GetStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StockMarketService/GetStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockMarketServiceServer).GetStocks(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockMarketService_AddStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockMarketServiceServer).AddStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StockMarketService/AddStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockMarketServiceServer).AddStock(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockMarketService_RemoveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockMarketServiceServer).RemoveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StockMarketService/RemoveStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockMarketServiceServer).RemoveStock(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockMarketService_GetPortfolioChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockMarketServiceServer).GetPortfolioChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StockMarketService/GetPortfolioChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockMarketServiceServer).GetPortfolioChanges(ctx, req.(*GetPortfolioChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockMarketService_ServiceDesc is the grpc.ServiceDesc for StockMarketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockMarketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StockMarketService",
	HandlerType: (*StockMarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _StockMarketService_CreateUser_Handler,
		},
		{
			MethodName: "GetStocks",
			Handler:    _StockMarketService_GetStocks_Handler,
		},
		{
			MethodName: "AddStock",
			Handler:    _StockMarketService_AddStock_Handler,
		},
		{
			MethodName: "RemoveStock",
			Handler:    _StockMarketService_RemoveStock_Handler,
		},
		{
			MethodName: "GetPortfolioChanges",
			Handler:    _StockMarketService_GetPortfolioChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stock_market_api.proto",
}
